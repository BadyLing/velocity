/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var velocity = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"EOF":4,"statements":5,"states":6,"statement":7,"TEXT":8,"BTEXT":9,"COMMENT":10,"BCOMMENT":11,"reference":12,"directive":13,"$":14,"ref":15,"!":16,"{":17,"}":18,"id":19,"property":20,"method":21,"index":22,"ID":23,"prop":24,"PROP":25,"(":26,"exprItems":27,")":28,"[":29,"idxExpr":30,"]":31,"integer":32,"dstring":33,"string":34,"range":35,"..":36,"list":37,"map":38,"mapItems":39,"mapItem":40,",":41,"mapKey":42,":":43,"exprItem":44,"expr":45,"*":46,"/":47,"%":48,"+":49,"-":50,">=":51,">":52,"<=":53,"<":54,"==":55,"!=":56,"&&":57,"||":58,"assignExpr":59,"=":60,"float":61,"TRUE":62,"FALSE":63,"NULL":64,"INTEGER":65,"FLOAT":66,"DSTRING":67,"STRING":68,"SET":69,"if":70,"FOREACH":71,"IN":72,"END":73,"INCLUDE":74,"PARSE":75,"EVALUATE":76,"DEFINE":77,"MACRO":78,"delim":79,"macroParams":80,"MACROCALL":81,"BMACROCALL":82,"STOP":83,"BREAK":84,"else":85,"ELSE":86,"elseif":87,"ELSEIF":88,"IF":89,"WS":90,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",8:"TEXT",9:"BTEXT",10:"COMMENT",11:"BCOMMENT",14:"$",16:"!",17:"{",18:"}",23:"ID",25:"PROP",26:"(",28:")",29:"[",31:"]",36:"..",41:",",43:":",46:"*",47:"/",48:"%",49:"+",50:"-",51:">=",52:">",53:"<=",54:"<",55:"==",56:"!=",57:"&&",58:"||",60:"=",62:"TRUE",63:"FALSE",64:"NULL",65:"INTEGER",66:"FLOAT",67:"DSTRING",68:"STRING",69:"SET",71:"FOREACH",72:"IN",73:"END",74:"INCLUDE",75:"PARSE",76:"EVALUATE",77:"DEFINE",78:"MACRO",81:"MACROCALL",82:"BMACROCALL",83:"STOP",84:"BREAK",86:"ELSE",88:"ELSEIF",89:"IF",90:"WS"},
productions_: [0,[3,1],[3,2],[5,1],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[12,2],[12,3],[12,4],[12,5],[15,1],[15,1],[15,1],[15,1],[19,1],[24,1],[20,2],[20,2],[20,2],[20,2],[21,4],[21,3],[22,4],[22,4],[22,4],[22,4],[30,1],[30,1],[30,1],[30,1],[35,5],[35,5],[35,5],[35,5],[37,3],[37,2],[38,3],[38,2],[39,1],[39,3],[40,3],[42,1],[42,1],[42,1],[42,1],[45,1],[45,3],[45,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[59,3],[27,1],[27,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[32,1],[32,2],[61,1],[61,2],[33,1],[34,1],[13,4],[13,1],[13,8],[13,7],[13,4],[13,4],[13,4],[13,6],[13,5],[13,8],[13,6],[13,7],[13,5],[13,4],[13,3],[13,6],[13,5],[13,5],[13,4],[13,1],[13,1],[85,1],[85,2],[87,5],[87,4],[87,6],[87,5],[87,6],[87,5],[70,6],[70,5],[70,7],[70,6],[70,7],[70,6],[80,1],[80,3],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return {type: 'Statements', body: []}; 
break;
case 2: return $$[$0-1]; 
break;
case 3: this.$ = {type: 'Statements', body: $$[$0]}; 
break;
case 4: this.$ = [$$[$0]]; 
break;
case 5: this.$ = [$$[$0-1]].concat($$[$0]); 
break;
case 6: this.$ = {type: 'Text', value: $$[$0].replace(/\\(?=#|\$)/g, '')}; 
break;
case 7: this.$ = {type: 'BText', value: $$[$0].replace(/^#\[\[|\]\]#/g, '')}; 
break;
case 8: this.$ = {type: 'Comment', value: $$[$0].replace(/^##/, '')}; 
break;
case 9: this.$ = {type: 'BComment', value: $$[$0].replace(/^#\*|\*#$/g, '')}; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = {type: 'Reference', object: $$[$0]}; 
break;
case 13: this.$ = {type: 'Reference', object: $$[$0], silent: true}; 
break;
case 14: this.$ = {type: 'Reference', object: $$[$0-1], wrapped: true}; 
break;
case 15: this.$ = {type: 'Reference', object: $$[$0-1], silent: true, wrapped: true}; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0]; 
break;
case 18: this.$ = $$[$0]; 
break;
case 19: this.$ = $$[$0]; 
break;
case 20: this.$ = {type: 'Identifier', name: $$[$0]}; 
break;
case 21: this.$ = {type: 'Prop', name: $$[$0].replace(/^\./, '')}; 
break;
case 22: this.$ = {type: 'Property', object: $$[$0-1], property: $$[$0]}; 
break;
case 23: this.$ = {type: 'Property', object: $$[$0-1], property: $$[$0]}; 
break;
case 24: this.$ = {type: 'Property', object: $$[$0-1], property: $$[$0]}; 
break;
case 25: this.$ = {type: 'Property', object: $$[$0-1], property: $$[$0]}; 
break;
case 26: this.$ = {type: 'Method', callee: $$[$0-3], arguments: $$[$0-1]}; 
break;
case 27: this.$ = {type: 'Method', callee: $$[$0-2], arguments: []}; 
break;
case 28: this.$ = {type: 'Index', object: $$[$0-3], property: $$[$0-1]}; 
break;
case 29: this.$ = {type: 'Index', object: $$[$0-3], property: $$[$0-1]}; 
break;
case 30: this.$ = {type: 'Index', object: $$[$0-3], property: $$[$0-1]}; 
break;
case 31: this.$ = {type: 'Index', object: $$[$0-3], property: $$[$0-1]}; 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = $$[$0]; 
break;
case 35: this.$ = $$[$0]; 
break;
case 36: this.$ = {type: 'Range', start: $$[$0-3], end: $$[$0-1]}; 
break;
case 37: this.$ = {type: 'Range', start: $$[$0-3], end: $$[$0-1]}; 
break;
case 38: this.$ = {type: 'Range', start: $$[$0-3], end: $$[$0-1]}; 
break;
case 39: this.$ = {type: 'Range', start: $$[$0-3], end: $$[$0-1]}; 
break;
case 40: this.$ = {type: 'List', elements: $$[$0-1]}; 
break;
case 41: this.$ = {type: 'List', elements: []}; 
break;
case 42: this.$ = {type: 'Map', mapItems: $$[$0-1]}; 
break;
case 43: this.$ = {type: 'Map', mapItems: []}; 
break;
case 44: this.$ = [$$[$0]]; 
break;
case 45: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 46: this.$ = {type: 'MapItem', property: $$[$0-2], value: $$[$0]}; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = $$[$0]; 
break;
case 50: this.$ = $$[$0]; 
break;
case 51: this.$ = $$[$0]; 
break;
case 52: this.$ = $$[$0-1]; 
break;
case 53: this.$ = {type: 'UnaryExpr', operator: $$[$0-1], argument: $$[$0]}; 
break;
case 54: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 55: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 56: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 57: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 58: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 59: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 60: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 61: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 62: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 63: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 64: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 65: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 66: this.$ = {type: 'BinaryExpr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0]}; 
break;
case 67: this.$ = {type: 'AssignExpr', left: $$[$0-2], right: $$[$0]}; 
break;
case 68: this.$ = [$$[$0]]; 
break;
case 69: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
case 70: this.$ = $$[$0]; 
break;
case 71: this.$ = $$[$0]; 
break;
case 72: this.$ = $$[$0]; 
break;
case 73: this.$ = $$[$0]; 
break;
case 74: this.$ = $$[$0]; 
break;
case 75: this.$ = $$[$0]; 
break;
case 76: this.$ = $$[$0]; 
break;
case 77: this.$ = $$[$0]; 
break;
case 78: this.$ = {type: 'Boolean', value: true}; 
break;
case 79: this.$ = {type: 'Boolean', value: false}; 
break;
case 80: this.$ = {type: 'Null', value: null}; 
break;
case 81: this.$ = {type: 'Integer', value: parseInt($$[$0])}; 
break;
case 82: this.$ = {type: 'Integer', value: - parseInt($$[$0])}; 
break;
case 83: this.$ = {type: 'Float', value: parseFloat($$[$0])}; 
break;
case 84: this.$ = {type: 'Float', value: - parseInt($$[$0])}; 
break;
case 85: this.$ = {type: 'DString', value: $$[$0].replace(/^"|"$/g, '').replace(/\\"/g, '"')}; 
break;
case 86: this.$ = {type: 'String', value: $$[$0].replace(/^'|'$/g, '')}; 
break;
case 87: this.$ = $$[$0-1]; 
break;
case 88: this.$ = $$[$0]; 
break;
case 89: this.$ = {type: 'Foreach', left: $$[$0-5], right: $$[$0-3], body: $$[$0-1]}; 
break;
case 90: this.$ = {type: 'Foreach', left: $$[$0-4], right: $$[$0-2]}; 
break;
case 91: this.$ = {type: 'Include', arguments: $$[$0-1]}; 
break;
case 92: this.$ = {type: 'Parse', argument: $$[$0-1]}; 
break;
case 93: this.$ = {type: 'Evaluate', argument: $$[$0-1]}; 
break;
case 94: this.$ = {type: 'Define', name: $$[$0-3], body: $$[$0-1]}; 
break;
case 95: this.$ = {type: 'Define', name: $$[$0-2]}; 
break;
case 96: this.$ = {type: 'Macro', name: $$[$0-5], arguments: $$[$0-3], body: $$[$0-1]}; 
break;
case 97: this.$ = {type: 'Macro', name: $$[$0-3], body: $$[$0-1]}; 
break;
case 98: this.$ = {type: 'Macro', name: $$[$0-4], arguments: $$[$0-2]}; 
break;
case 99: this.$ = {type: 'Macro', name: $$[$0-2]}; 
break;
case 100: this.$ = {type: 'MacroCall', name: $$[$0-3].replace(/^#{?|}$/g, ''), arguments: $$[$0-1]}; 
break;
case 101: this.$ = {type: 'MacroCall', name: $$[$0-2].replace(/^#{?|}$/g, ''), arguments: []}; 
break;
case 102: this.$ = {type: 'MacroCall', name: $$[$0-5].replace(/^#@{?|}$/g, ''), arguments: $$[$0-3], body: $$[$0-1]}; 
break;
case 103: this.$ = {type: 'MacroCall', name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: [], body: $$[$0-1]}; 
break;
case 104: this.$ = {type: 'MacroCall', name: $$[$0-4].replace(/^#@{?|}$/g, ''), arguments: $$[$0-2]}; 
break;
case 105: this.$ = {type: 'MacroCall', name: $$[$0-3].replace(/^#@{?|}$/g, ''), arguments: []}; 
break;
case 106: this.$ = {type: 'Stop'}; 
break;
case 107: this.$ = {type: 'Break'}; 
break;
case 108: this.$ = undefined; 
break;
case 109: this.$ = $$[$0]; 
break;
case 110: this.$ = {type: 'If', test: $$[$0-2], consequent: $$[$0]}; 
break;
case 111: this.$ = {type: 'If', test: $$[$0-1]}; 
break;
case 112: this.$ = {type: 'If', test: $$[$0-3], consequent: $$[$0-1], alternate: $$[$0]}; 
break;
case 113: this.$ = {type: 'If', test: $$[$0-2], alternate: $$[$0]}; 
break;
case 114: this.$ = {type: 'If', test: $$[$0-3], consequent: $$[$0-1], alternate: $$[$0]}; 
break;
case 115: this.$ = {type: 'If', test: $$[$0-2], alternate: $$[$01]}; 
break;
case 116: this.$ = {type: 'If', test: $$[$0-3], consequent: $$[$0-1]}; 
break;
case 117: this.$ = {type: 'If', test: $$[$0-2]}; 
break;
case 118: this.$ = {type: 'If', test: $$[$0-4], consequent: $$[$0-2], alternate: $$[$0-1]}; 
break;
case 119: this.$ = {type: 'If', test: $$[$0-3],  alternate: $$[$0-1]}; 
break;
case 120: this.$ = {type: 'If', test: $$[$0-4], consequent: $$[$0-2], alternate: $$[$0-1]}; 
break;
case 121: this.$ = {type: 'If', test: $$[$0-3], alternate: $$[$0-1]}; 
break;
case 122: this.$ = [$$[$0]]; 
break;
case 123: this.$ = [$$[$0-2]].concat($$[$0]); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{1:[3]},{1:[2,1]},{4:[1,26]},{4:[2,3],73:[2,3],86:[2,3],88:[2,3]},{4:[2,4],6:27,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[2,4],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],86:[2,4],88:[2,4],89:[1,25]},{4:[2,6],8:[2,6],9:[2,6],10:[2,6],11:[2,6],14:[2,6],69:[2,6],71:[2,6],73:[2,6],74:[2,6],75:[2,6],76:[2,6],77:[2,6],78:[2,6],81:[2,6],82:[2,6],83:[2,6],84:[2,6],86:[2,6],88:[2,6],89:[2,6]},{4:[2,7],8:[2,7],9:[2,7],10:[2,7],11:[2,7],14:[2,7],69:[2,7],71:[2,7],73:[2,7],74:[2,7],75:[2,7],76:[2,7],77:[2,7],78:[2,7],81:[2,7],82:[2,7],83:[2,7],84:[2,7],86:[2,7],88:[2,7],89:[2,7]},{4:[2,8],8:[2,8],9:[2,8],10:[2,8],11:[2,8],14:[2,8],69:[2,8],71:[2,8],73:[2,8],74:[2,8],75:[2,8],76:[2,8],77:[2,8],78:[2,8],81:[2,8],82:[2,8],83:[2,8],84:[2,8],86:[2,8],88:[2,8],89:[2,8]},{4:[2,9],8:[2,9],9:[2,9],10:[2,9],11:[2,9],14:[2,9],69:[2,9],71:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9],77:[2,9],78:[2,9],81:[2,9],82:[2,9],83:[2,9],84:[2,9],86:[2,9],88:[2,9],89:[2,9]},{4:[2,10],8:[2,10],9:[2,10],10:[2,10],11:[2,10],14:[2,10],69:[2,10],71:[2,10],73:[2,10],74:[2,10],75:[2,10],76:[2,10],77:[2,10],78:[2,10],81:[2,10],82:[2,10],83:[2,10],84:[2,10],86:[2,10],88:[2,10],89:[2,10]},{4:[2,11],8:[2,11],9:[2,11],10:[2,11],11:[2,11],14:[2,11],69:[2,11],71:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11],77:[2,11],78:[2,11],81:[2,11],82:[2,11],83:[2,11],84:[2,11],86:[2,11],88:[2,11],89:[2,11]},{15:28,16:[1,29],17:[1,30],19:31,20:32,21:33,22:34,23:[1,35]},{26:[1,36]},{4:[2,88],8:[2,88],9:[2,88],10:[2,88],11:[2,88],14:[2,88],69:[2,88],71:[2,88],73:[2,88],74:[2,88],75:[2,88],76:[2,88],77:[2,88],78:[2,88],81:[2,88],82:[2,88],83:[2,88],84:[2,88],86:[2,88],88:[2,88],89:[2,88]},{26:[1,37]},{26:[1,38]},{26:[1,39]},{26:[1,40]},{26:[1,41]},{26:[1,42]},{26:[1,43]},{26:[1,44]},{4:[2,106],8:[2,106],9:[2,106],10:[2,106],11:[2,106],14:[2,106],69:[2,106],71:[2,106],73:[2,106],74:[2,106],75:[2,106],76:[2,106],77:[2,106],78:[2,106],81:[2,106],82:[2,106],83:[2,106],84:[2,106],86:[2,106],88:[2,106],89:[2,106]},{4:[2,107],8:[2,107],9:[2,107],10:[2,107],11:[2,107],14:[2,107],69:[2,107],71:[2,107],73:[2,107],74:[2,107],75:[2,107],76:[2,107],77:[2,107],78:[2,107],81:[2,107],82:[2,107],83:[2,107],84:[2,107],86:[2,107],88:[2,107],89:[2,107]},{26:[1,45]},{1:[2,2]},{4:[2,5],73:[2,5],86:[2,5],88:[2,5]},{4:[2,12],8:[2,12],9:[2,12],10:[2,12],11:[2,12],14:[2,12],18:[2,12],28:[2,12],31:[2,12],36:[2,12],41:[2,12],43:[2,12],46:[2,12],47:[2,12],48:[2,12],49:[2,12],50:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],60:[2,12],69:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12],77:[2,12],78:[2,12],81:[2,12],82:[2,12],83:[2,12],84:[2,12],86:[2,12],88:[2,12],89:[2,12],90:[2,12]},{15:46,17:[1,47],19:31,20:32,21:33,22:34,23:[1,35]},{15:48,19:31,20:32,21:33,22:34,23:[1,35]},{4:[2,16],8:[2,16],9:[2,16],10:[2,16],11:[2,16],14:[2,16],18:[2,16],24:49,25:[1,51],28:[2,16],29:[1,50],31:[2,16],36:[2,16],41:[2,16],43:[2,16],46:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16],60:[2,16],69:[2,16],71:[2,16],72:[2,16],73:[2,16],74:[2,16],75:[2,16],76:[2,16],77:[2,16],78:[2,16],81:[2,16],82:[2,16],83:[2,16],84:[2,16],86:[2,16],88:[2,16],89:[2,16],90:[2,16]},{4:[2,17],8:[2,17],9:[2,17],10:[2,17],11:[2,17],14:[2,17],18:[2,17],24:52,25:[1,51],26:[1,53],28:[2,17],29:[1,54],31:[2,17],36:[2,17],41:[2,17],43:[2,17],46:[2,17],47:[2,17],48:[2,17],49:[2,17],50:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17],60:[2,17],69:[2,17],71:[2,17],72:[2,17],73:[2,17],74:[2,17],75:[2,17],76:[2,17],77:[2,17],78:[2,17],81:[2,17],82:[2,17],83:[2,17],84:[2,17],86:[2,17],88:[2,17],89:[2,17],90:[2,17]},{4:[2,18],8:[2,18],9:[2,18],10:[2,18],11:[2,18],14:[2,18],18:[2,18],24:55,25:[1,51],28:[2,18],29:[1,56],31:[2,18],36:[2,18],41:[2,18],43:[2,18],46:[2,18],47:[2,18],48:[2,18],49:[2,18],50:[2,18],51:[2,18],52:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],60:[2,18],69:[2,18],71:[2,18],72:[2,18],73:[2,18],74:[2,18],75:[2,18],76:[2,18],77:[2,18],78:[2,18],81:[2,18],82:[2,18],83:[2,18],84:[2,18],86:[2,18],88:[2,18],89:[2,18],90:[2,18]},{4:[2,19],8:[2,19],9:[2,19],10:[2,19],11:[2,19],14:[2,19],18:[2,19],24:57,25:[1,51],28:[2,19],29:[1,58],31:[2,19],36:[2,19],41:[2,19],43:[2,19],46:[2,19],47:[2,19],48:[2,19],49:[2,19],50:[2,19],51:[2,19],52:[2,19],53:[2,19],54:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19],60:[2,19],69:[2,19],71:[2,19],72:[2,19],73:[2,19],74:[2,19],75:[2,19],76:[2,19],77:[2,19],78:[2,19],81:[2,19],82:[2,19],83:[2,19],84:[2,19],86:[2,19],88:[2,19],89:[2,19],90:[2,19]},{4:[2,20],8:[2,20],9:[2,20],10:[2,20],11:[2,20],14:[2,20],18:[2,20],25:[2,20],28:[2,20],29:[2,20],31:[2,20],36:[2,20],41:[2,20],43:[2,20],46:[2,20],47:[2,20],48:[2,20],49:[2,20],50:[2,20],51:[2,20],52:[2,20],53:[2,20],54:[2,20],55:[2,20],56:[2,20],57:[2,20],58:[2,20],60:[2,20],69:[2,20],71:[2,20],72:[2,20],73:[2,20],74:[2,20],75:[2,20],76:[2,20],77:[2,20],78:[2,20],81:[2,20],82:[2,20],83:[2,20],84:[2,20],86:[2,20],88:[2,20],89:[2,20],90:[2,20]},{12:60,14:[1,12],59:59},{12:61,14:[1,12]},{12:64,14:[1,12],17:[1,81],27:62,29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:63,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],17:[1,81],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:82,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],17:[1,81],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:83,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:84,14:[1,12]},{23:[1,85]},{12:64,14:[1,12],17:[1,81],28:[1,87],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:88,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79],80:86},{12:64,14:[1,12],17:[1,81],28:[1,90],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:88,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79],80:89},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:91,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{4:[2,13],8:[2,13],9:[2,13],10:[2,13],11:[2,13],14:[2,13],18:[2,13],28:[2,13],31:[2,13],36:[2,13],41:[2,13],43:[2,13],46:[2,13],47:[2,13],48:[2,13],49:[2,13],50:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],60:[2,13],69:[2,13],71:[2,13],72:[2,13],73:[2,13],74:[2,13],75:[2,13],76:[2,13],77:[2,13],78:[2,13],81:[2,13],82:[2,13],83:[2,13],84:[2,13],86:[2,13],88:[2,13],89:[2,13],90:[2,13]},{15:95,19:31,20:32,21:33,22:34,23:[1,35]},{18:[1,96]},{4:[2,22],8:[2,22],9:[2,22],10:[2,22],11:[2,22],14:[2,22],18:[2,22],25:[2,22],26:[2,22],28:[2,22],29:[2,22],31:[2,22],36:[2,22],41:[2,22],43:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],51:[2,22],52:[2,22],53:[2,22],54:[2,22],55:[2,22],56:[2,22],57:[2,22],58:[2,22],60:[2,22],69:[2,22],71:[2,22],72:[2,22],73:[2,22],74:[2,22],75:[2,22],76:[2,22],77:[2,22],78:[2,22],81:[2,22],82:[2,22],83:[2,22],84:[2,22],86:[2,22],88:[2,22],89:[2,22],90:[2,22]},{12:98,14:[1,12],30:97,32:99,33:100,34:101,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{4:[2,21],8:[2,21],9:[2,21],10:[2,21],11:[2,21],14:[2,21],18:[2,21],25:[2,21],26:[2,21],28:[2,21],29:[2,21],31:[2,21],36:[2,21],41:[2,21],43:[2,21],46:[2,21],47:[2,21],48:[2,21],49:[2,21],50:[2,21],51:[2,21],52:[2,21],53:[2,21],54:[2,21],55:[2,21],56:[2,21],57:[2,21],58:[2,21],60:[2,21],69:[2,21],71:[2,21],72:[2,21],73:[2,21],74:[2,21],75:[2,21],76:[2,21],77:[2,21],78:[2,21],81:[2,21],82:[2,21],83:[2,21],84:[2,21],86:[2,21],88:[2,21],89:[2,21],90:[2,21]},{4:[2,25],8:[2,25],9:[2,25],10:[2,25],11:[2,25],14:[2,25],18:[2,25],25:[2,25],26:[2,25],28:[2,25],29:[2,25],31:[2,25],36:[2,25],41:[2,25],43:[2,25],46:[2,25],47:[2,25],48:[2,25],49:[2,25],50:[2,25],51:[2,25],52:[2,25],53:[2,25],54:[2,25],55:[2,25],56:[2,25],57:[2,25],58:[2,25],60:[2,25],69:[2,25],71:[2,25],72:[2,25],73:[2,25],74:[2,25],75:[2,25],76:[2,25],77:[2,25],78:[2,25],81:[2,25],82:[2,25],83:[2,25],84:[2,25],86:[2,25],88:[2,25],89:[2,25],90:[2,25]},{12:64,14:[1,12],17:[1,81],27:103,28:[1,104],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:63,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:98,14:[1,12],30:105,32:99,33:100,34:101,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{4:[2,23],8:[2,23],9:[2,23],10:[2,23],11:[2,23],14:[2,23],18:[2,23],25:[2,23],26:[2,23],28:[2,23],29:[2,23],31:[2,23],36:[2,23],41:[2,23],43:[2,23],46:[2,23],47:[2,23],48:[2,23],49:[2,23],50:[2,23],51:[2,23],52:[2,23],53:[2,23],54:[2,23],55:[2,23],56:[2,23],57:[2,23],58:[2,23],60:[2,23],69:[2,23],71:[2,23],72:[2,23],73:[2,23],74:[2,23],75:[2,23],76:[2,23],77:[2,23],78:[2,23],81:[2,23],82:[2,23],83:[2,23],84:[2,23],86:[2,23],88:[2,23],89:[2,23],90:[2,23]},{12:98,14:[1,12],30:106,32:99,33:100,34:101,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{4:[2,24],8:[2,24],9:[2,24],10:[2,24],11:[2,24],14:[2,24],18:[2,24],25:[2,24],26:[2,24],28:[2,24],29:[2,24],31:[2,24],36:[2,24],41:[2,24],43:[2,24],46:[2,24],47:[2,24],48:[2,24],49:[2,24],50:[2,24],51:[2,24],52:[2,24],53:[2,24],54:[2,24],55:[2,24],56:[2,24],57:[2,24],58:[2,24],60:[2,24],69:[2,24],71:[2,24],72:[2,24],73:[2,24],74:[2,24],75:[2,24],76:[2,24],77:[2,24],78:[2,24],81:[2,24],82:[2,24],83:[2,24],84:[2,24],86:[2,24],88:[2,24],89:[2,24],90:[2,24]},{12:98,14:[1,12],30:107,32:99,33:100,34:101,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{28:[1,108]},{60:[1,109]},{72:[1,110]},{28:[1,111]},{28:[2,68],31:[2,68],41:[1,112]},{18:[2,70],28:[2,70],31:[2,70],41:[2,70],46:[2,70],47:[2,70],48:[2,70],49:[2,70],50:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],90:[2,70]},{18:[2,71],28:[2,71],31:[2,71],41:[2,71],46:[2,71],47:[2,71],48:[2,71],49:[2,71],50:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],90:[2,71]},{18:[2,72],28:[2,72],31:[2,72],41:[2,72],46:[2,72],47:[2,72],48:[2,72],49:[2,72],50:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],90:[2,72]},{18:[2,73],28:[2,73],31:[2,73],41:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],90:[2,73]},{18:[2,74],28:[2,74],31:[2,74],41:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],90:[2,74]},{18:[2,75],28:[2,75],31:[2,75],41:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],90:[2,75]},{18:[2,76],28:[2,76],31:[2,76],41:[2,76],46:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],90:[2,76]},{18:[2,77],28:[2,77],31:[2,77],41:[2,77],46:[2,77],47:[2,77],48:[2,77],49:[2,77],50:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],90:[2,77]},{18:[2,78],28:[2,78],31:[2,78],41:[2,78],46:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],51:[2,78],52:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],90:[2,78]},{18:[2,79],28:[2,79],31:[2,79],41:[2,79],46:[2,79],47:[2,79],48:[2,79],49:[2,79],50:[2,79],51:[2,79],52:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79],57:[2,79],58:[2,79],90:[2,79]},{18:[2,80],28:[2,80],31:[2,80],41:[2,80],46:[2,80],47:[2,80],48:[2,80],49:[2,80],50:[2,80],51:[2,80],52:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80],58:[2,80],90:[2,80]},{18:[2,81],28:[2,81],31:[2,81],36:[2,81],41:[2,81],43:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],51:[2,81],52:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],90:[2,81]},{65:[1,113],66:[1,114]},{18:[2,83],28:[2,83],31:[2,83],41:[2,83],46:[2,83],47:[2,83],48:[2,83],49:[2,83],50:[2,83],51:[2,83],52:[2,83],53:[2,83],54:[2,83],55:[2,83],56:[2,83],57:[2,83],58:[2,83],90:[2,83]},{18:[2,85],28:[2,85],31:[2,85],41:[2,85],43:[2,85],46:[2,85],47:[2,85],48:[2,85],49:[2,85],50:[2,85],51:[2,85],52:[2,85],53:[2,85],54:[2,85],55:[2,85],56:[2,85],57:[2,85],58:[2,85],90:[2,85]},{18:[2,86],28:[2,86],31:[2,86],41:[2,86],43:[2,86],46:[2,86],47:[2,86],48:[2,86],49:[2,86],50:[2,86],51:[2,86],52:[2,86],53:[2,86],54:[2,86],55:[2,86],56:[2,86],57:[2,86],58:[2,86],90:[2,86]},{12:115,14:[1,12],17:[1,81],27:117,29:[1,80],31:[1,118],32:116,33:67,34:68,35:69,37:70,38:71,44:63,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:123,14:[1,12],18:[1,120],32:126,33:125,34:124,39:119,40:121,42:122,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{28:[1,127]},{28:[1,128]},{28:[1,129]},{28:[1,131],41:[1,133],79:130,90:[1,132]},{28:[1,134]},{4:[2,101],8:[2,101],9:[2,101],10:[2,101],11:[2,101],14:[2,101],69:[2,101],71:[2,101],73:[2,101],74:[2,101],75:[2,101],76:[2,101],77:[2,101],78:[2,101],81:[2,101],82:[2,101],83:[2,101],84:[2,101],86:[2,101],88:[2,101],89:[2,101]},{28:[2,122],41:[1,133],79:135,90:[1,132]},{28:[1,136]},{7:137,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,138],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{28:[1,139],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[1,151],58:[1,152]},{28:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],51:[2,51],52:[2,51],53:[2,51],54:[2,51],55:[2,51],56:[2,51],57:[2,51],58:[2,51]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:153,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:154,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{18:[1,155]},{4:[2,14],8:[2,14],9:[2,14],10:[2,14],11:[2,14],14:[2,14],18:[2,14],28:[2,14],31:[2,14],36:[2,14],41:[2,14],43:[2,14],46:[2,14],47:[2,14],48:[2,14],49:[2,14],50:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],60:[2,14],69:[2,14],71:[2,14],72:[2,14],73:[2,14],74:[2,14],75:[2,14],76:[2,14],77:[2,14],78:[2,14],81:[2,14],82:[2,14],83:[2,14],84:[2,14],86:[2,14],88:[2,14],89:[2,14],90:[2,14]},{31:[1,156]},{31:[2,32]},{31:[2,33]},{31:[2,34]},{31:[2,35]},{65:[1,113]},{28:[1,157]},{4:[2,27],8:[2,27],9:[2,27],10:[2,27],11:[2,27],14:[2,27],18:[2,27],25:[2,27],28:[2,27],29:[2,27],31:[2,27],36:[2,27],41:[2,27],43:[2,27],46:[2,27],47:[2,27],48:[2,27],49:[2,27],50:[2,27],51:[2,27],52:[2,27],53:[2,27],54:[2,27],55:[2,27],56:[2,27],57:[2,27],58:[2,27],60:[2,27],69:[2,27],71:[2,27],72:[2,27],73:[2,27],74:[2,27],75:[2,27],76:[2,27],77:[2,27],78:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],86:[2,27],88:[2,27],89:[2,27],90:[2,27]},{31:[1,158]},{31:[1,159]},{31:[1,160]},{4:[2,87],8:[2,87],9:[2,87],10:[2,87],11:[2,87],14:[2,87],69:[2,87],71:[2,87],73:[2,87],74:[2,87],75:[2,87],76:[2,87],77:[2,87],78:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],86:[2,87],88:[2,87],89:[2,87]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:161,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:162,14:[1,12]},{4:[2,91],8:[2,91],9:[2,91],10:[2,91],11:[2,91],14:[2,91],69:[2,91],71:[2,91],73:[2,91],74:[2,91],75:[2,91],76:[2,91],77:[2,91],78:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],86:[2,91],88:[2,91],89:[2,91]},{12:64,14:[1,12],17:[1,81],27:163,29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:63,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{18:[2,82],28:[2,82],31:[2,82],36:[2,82],41:[2,82],43:[2,82],46:[2,82],47:[2,82],48:[2,82],49:[2,82],50:[2,82],51:[2,82],52:[2,82],53:[2,82],54:[2,82],55:[2,82],56:[2,82],57:[2,82],58:[2,82],90:[2,82]},{18:[2,84],28:[2,84],31:[2,84],41:[2,84],46:[2,84],47:[2,84],48:[2,84],49:[2,84],50:[2,84],51:[2,84],52:[2,84],53:[2,84],54:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],90:[2,84]},{31:[2,70],36:[1,164],41:[2,70]},{31:[2,71],36:[1,165],41:[2,71]},{31:[1,166]},{18:[2,41],28:[2,41],31:[2,41],41:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],51:[2,41],52:[2,41],53:[2,41],54:[2,41],55:[2,41],56:[2,41],57:[2,41],58:[2,41],90:[2,41]},{18:[1,167]},{18:[2,43],28:[2,43],31:[2,43],41:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],51:[2,43],52:[2,43],53:[2,43],54:[2,43],55:[2,43],56:[2,43],57:[2,43],58:[2,43],90:[2,43]},{18:[2,44],41:[1,168]},{43:[1,169]},{43:[2,47]},{43:[2,48]},{43:[2,49]},{43:[2,50]},{4:[2,92],8:[2,92],9:[2,92],10:[2,92],11:[2,92],14:[2,92],69:[2,92],71:[2,92],73:[2,92],74:[2,92],75:[2,92],76:[2,92],77:[2,92],78:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],86:[2,92],88:[2,92],89:[2,92]},{4:[2,93],8:[2,93],9:[2,93],10:[2,93],11:[2,93],14:[2,93],69:[2,93],71:[2,93],73:[2,93],74:[2,93],75:[2,93],76:[2,93],77:[2,93],78:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],86:[2,93],88:[2,93],89:[2,93]},{5:170,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,171],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{12:64,14:[1,12],17:[1,81],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:88,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79],80:172},{5:173,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,174],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{14:[2,124],17:[2,124],29:[2,124],50:[2,124],62:[2,124],63:[2,124],64:[2,124],65:[2,124],66:[2,124],67:[2,124],68:[2,124]},{14:[2,125],17:[2,125],29:[2,125],50:[2,125],62:[2,125],63:[2,125],64:[2,125],65:[2,125],66:[2,125],67:[2,125],68:[2,125]},{4:[2,100],8:[2,100],9:[2,100],10:[2,100],11:[2,100],14:[2,100],69:[2,100],71:[2,100],73:[2,100],74:[2,100],75:[2,100],76:[2,100],77:[2,100],78:[2,100],81:[2,100],82:[2,100],83:[2,100],84:[2,100],86:[2,100],88:[2,100],89:[2,100]},{12:64,14:[1,12],17:[1,81],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:88,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79],80:175},{7:176,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,177],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{73:[1,178]},{4:[2,105],8:[2,105],9:[2,105],10:[2,105],11:[2,105],14:[2,105],69:[2,105],71:[2,105],73:[2,105],74:[2,105],75:[2,105],76:[2,105],77:[2,105],78:[2,105],81:[2,105],82:[2,105],83:[2,105],84:[2,105],86:[2,105],88:[2,105],89:[2,105]},{5:179,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,180],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],85:181,86:[1,183],87:182,88:[1,184],89:[1,25]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:185,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:186,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:187,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:188,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:189,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:190,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:191,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:192,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:193,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:194,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:195,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:196,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:197,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{28:[1,198],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[1,151],58:[1,152]},{28:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],51:[2,53],52:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53]},{4:[2,15],8:[2,15],9:[2,15],10:[2,15],11:[2,15],14:[2,15],18:[2,15],28:[2,15],31:[2,15],36:[2,15],41:[2,15],43:[2,15],46:[2,15],47:[2,15],48:[2,15],49:[2,15],50:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],60:[2,15],69:[2,15],71:[2,15],72:[2,15],73:[2,15],74:[2,15],75:[2,15],76:[2,15],77:[2,15],78:[2,15],81:[2,15],82:[2,15],83:[2,15],84:[2,15],86:[2,15],88:[2,15],89:[2,15],90:[2,15]},{4:[2,28],8:[2,28],9:[2,28],10:[2,28],11:[2,28],14:[2,28],18:[2,28],25:[2,28],28:[2,28],29:[2,28],31:[2,28],36:[2,28],41:[2,28],43:[2,28],46:[2,28],47:[2,28],48:[2,28],49:[2,28],50:[2,28],51:[2,28],52:[2,28],53:[2,28],54:[2,28],55:[2,28],56:[2,28],57:[2,28],58:[2,28],60:[2,28],69:[2,28],71:[2,28],72:[2,28],73:[2,28],74:[2,28],75:[2,28],76:[2,28],77:[2,28],78:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],86:[2,28],88:[2,28],89:[2,28],90:[2,28]},{4:[2,26],8:[2,26],9:[2,26],10:[2,26],11:[2,26],14:[2,26],18:[2,26],25:[2,26],28:[2,26],29:[2,26],31:[2,26],36:[2,26],41:[2,26],43:[2,26],46:[2,26],47:[2,26],48:[2,26],49:[2,26],50:[2,26],51:[2,26],52:[2,26],53:[2,26],54:[2,26],55:[2,26],56:[2,26],57:[2,26],58:[2,26],60:[2,26],69:[2,26],71:[2,26],72:[2,26],73:[2,26],74:[2,26],75:[2,26],76:[2,26],77:[2,26],78:[2,26],81:[2,26],82:[2,26],83:[2,26],84:[2,26],86:[2,26],88:[2,26],89:[2,26],90:[2,26]},{4:[2,30],8:[2,30],9:[2,30],10:[2,30],11:[2,30],14:[2,30],18:[2,30],25:[2,30],28:[2,30],29:[2,30],31:[2,30],36:[2,30],41:[2,30],43:[2,30],46:[2,30],47:[2,30],48:[2,30],49:[2,30],50:[2,30],51:[2,30],52:[2,30],53:[2,30],54:[2,30],55:[2,30],56:[2,30],57:[2,30],58:[2,30],60:[2,30],69:[2,30],71:[2,30],72:[2,30],73:[2,30],74:[2,30],75:[2,30],76:[2,30],77:[2,30],78:[2,30],81:[2,30],82:[2,30],83:[2,30],84:[2,30],86:[2,30],88:[2,30],89:[2,30],90:[2,30]},{4:[2,29],8:[2,29],9:[2,29],10:[2,29],11:[2,29],14:[2,29],18:[2,29],25:[2,29],28:[2,29],29:[2,29],31:[2,29],36:[2,29],41:[2,29],43:[2,29],46:[2,29],47:[2,29],48:[2,29],49:[2,29],50:[2,29],51:[2,29],52:[2,29],53:[2,29],54:[2,29],55:[2,29],56:[2,29],57:[2,29],58:[2,29],60:[2,29],69:[2,29],71:[2,29],72:[2,29],73:[2,29],74:[2,29],75:[2,29],76:[2,29],77:[2,29],78:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],86:[2,29],88:[2,29],89:[2,29],90:[2,29]},{4:[2,31],8:[2,31],9:[2,31],10:[2,31],11:[2,31],14:[2,31],18:[2,31],25:[2,31],28:[2,31],29:[2,31],31:[2,31],36:[2,31],41:[2,31],43:[2,31],46:[2,31],47:[2,31],48:[2,31],49:[2,31],50:[2,31],51:[2,31],52:[2,31],53:[2,31],54:[2,31],55:[2,31],56:[2,31],57:[2,31],58:[2,31],60:[2,31],69:[2,31],71:[2,31],72:[2,31],73:[2,31],74:[2,31],75:[2,31],76:[2,31],77:[2,31],78:[2,31],81:[2,31],82:[2,31],83:[2,31],84:[2,31],86:[2,31],88:[2,31],89:[2,31],90:[2,31]},{28:[2,67],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[1,151],58:[1,152]},{28:[1,199]},{28:[2,69],31:[2,69]},{12:200,14:[1,12],32:201,50:[1,102],65:[1,75]},{12:202,14:[1,12],32:203,50:[1,102],65:[1,75]},{18:[2,40],28:[2,40],31:[2,40],41:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],51:[2,40],52:[2,40],53:[2,40],54:[2,40],55:[2,40],56:[2,40],57:[2,40],58:[2,40],90:[2,40]},{18:[2,42],28:[2,42],31:[2,42],41:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],51:[2,42],52:[2,42],53:[2,42],54:[2,42],55:[2,42],56:[2,42],57:[2,42],58:[2,42],90:[2,42]},{12:123,14:[1,12],32:126,33:125,34:124,39:204,40:121,42:122,50:[1,102],65:[1,75],67:[1,78],68:[1,79]},{12:64,14:[1,12],17:[1,81],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:205,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{73:[1,206]},{4:[2,95],8:[2,95],9:[2,95],10:[2,95],11:[2,95],14:[2,95],69:[2,95],71:[2,95],73:[2,95],74:[2,95],75:[2,95],76:[2,95],77:[2,95],78:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],86:[2,95],88:[2,95],89:[2,95]},{28:[1,207]},{73:[1,208]},{4:[2,99],8:[2,99],9:[2,99],10:[2,99],11:[2,99],14:[2,99],69:[2,99],71:[2,99],73:[2,99],74:[2,99],75:[2,99],76:[2,99],77:[2,99],78:[2,99],81:[2,99],82:[2,99],83:[2,99],84:[2,99],86:[2,99],88:[2,99],89:[2,99]},{28:[2,123]},{73:[1,209]},{4:[2,104],8:[2,104],9:[2,104],10:[2,104],11:[2,104],14:[2,104],69:[2,104],71:[2,104],73:[2,104],74:[2,104],75:[2,104],76:[2,104],77:[2,104],78:[2,104],81:[2,104],82:[2,104],83:[2,104],84:[2,104],86:[2,104],88:[2,104],89:[2,104]},{4:[2,103],8:[2,103],9:[2,103],10:[2,103],11:[2,103],14:[2,103],69:[2,103],71:[2,103],73:[2,103],74:[2,103],75:[2,103],76:[2,103],77:[2,103],78:[2,103],81:[2,103],82:[2,103],83:[2,103],84:[2,103],86:[2,103],88:[2,103],89:[2,103]},{73:[1,210],85:211,86:[1,183],87:212,88:[1,184]},{4:[2,117],8:[2,117],9:[2,117],10:[2,117],11:[2,117],14:[2,117],69:[2,117],71:[2,117],73:[2,117],74:[2,117],75:[2,117],76:[2,117],77:[2,117],78:[2,117],81:[2,117],82:[2,117],83:[2,117],84:[2,117],86:[2,117],88:[2,117],89:[2,117]},{73:[1,213]},{73:[1,214]},{5:215,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[2,108],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{26:[1,216]},{28:[2,54],46:[2,54],47:[2,54],48:[2,54],49:[2,54],50:[2,54],51:[2,54],52:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54]},{28:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],51:[2,55],52:[2,55],53:[2,55],54:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55]},{28:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],51:[2,56],52:[2,56],53:[2,56],54:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56]},{28:[2,57],46:[1,140],47:[1,141],48:[1,142],49:[2,57],50:[2,57],51:[2,57],52:[2,57],53:[2,57],54:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57]},{28:[2,58],46:[1,140],47:[1,141],48:[1,142],49:[2,58],50:[2,58],51:[2,58],52:[2,58],53:[2,58],54:[2,58],55:[2,58],56:[2,58],57:[2,58],58:[2,58]},{28:[2,59],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[2,59],52:[2,59],53:[2,59],54:[2,59],55:[2,59],56:[2,59],57:[2,59],58:[2,59]},{28:[2,60],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60]},{28:[2,61],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61]},{28:[2,62],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[2,62],52:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62]},{28:[2,63],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[2,63],56:[2,63],57:[2,63],58:[2,63]},{28:[2,64],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[2,64],56:[2,64],57:[2,64],58:[2,64]},{28:[2,65],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[2,65],58:[2,65]},{28:[2,66],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[1,151],58:[2,66]},{28:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],51:[2,52],52:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52]},{5:217,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,218],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{31:[1,219]},{31:[1,220]},{31:[1,221]},{31:[1,222]},{18:[2,45]},{18:[2,46],41:[2,46]},{4:[2,94],8:[2,94],9:[2,94],10:[2,94],11:[2,94],14:[2,94],69:[2,94],71:[2,94],73:[2,94],74:[2,94],75:[2,94],76:[2,94],77:[2,94],78:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],86:[2,94],88:[2,94],89:[2,94]},{5:223,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[1,224],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],89:[1,25]},{4:[2,97],8:[2,97],9:[2,97],10:[2,97],11:[2,97],14:[2,97],69:[2,97],71:[2,97],73:[2,97],74:[2,97],75:[2,97],76:[2,97],77:[2,97],78:[2,97],81:[2,97],82:[2,97],83:[2,97],84:[2,97],86:[2,97],88:[2,97],89:[2,97]},{4:[2,102],8:[2,102],9:[2,102],10:[2,102],11:[2,102],14:[2,102],69:[2,102],71:[2,102],73:[2,102],74:[2,102],75:[2,102],76:[2,102],77:[2,102],78:[2,102],81:[2,102],82:[2,102],83:[2,102],84:[2,102],86:[2,102],88:[2,102],89:[2,102]},{4:[2,116],8:[2,116],9:[2,116],10:[2,116],11:[2,116],14:[2,116],69:[2,116],71:[2,116],73:[2,116],74:[2,116],75:[2,116],76:[2,116],77:[2,116],78:[2,116],81:[2,116],82:[2,116],83:[2,116],84:[2,116],86:[2,116],88:[2,116],89:[2,116]},{73:[1,225]},{73:[1,226]},{4:[2,119],8:[2,119],9:[2,119],10:[2,119],11:[2,119],14:[2,119],69:[2,119],71:[2,119],73:[2,119],74:[2,119],75:[2,119],76:[2,119],77:[2,119],78:[2,119],81:[2,119],82:[2,119],83:[2,119],84:[2,119],86:[2,119],88:[2,119],89:[2,119]},{4:[2,121],8:[2,121],9:[2,121],10:[2,121],11:[2,121],14:[2,121],69:[2,121],71:[2,121],73:[2,121],74:[2,121],75:[2,121],76:[2,121],77:[2,121],78:[2,121],81:[2,121],82:[2,121],83:[2,121],84:[2,121],86:[2,121],88:[2,121],89:[2,121]},{73:[2,109]},{12:64,14:[1,12],16:[1,94],17:[1,81],26:[1,93],29:[1,80],32:65,33:67,34:68,35:69,37:70,38:71,44:92,45:227,50:[1,76],61:66,62:[1,72],63:[1,73],64:[1,74],65:[1,75],66:[1,77],67:[1,78],68:[1,79]},{73:[1,228]},{4:[2,90],8:[2,90],9:[2,90],10:[2,90],11:[2,90],14:[2,90],69:[2,90],71:[2,90],73:[2,90],74:[2,90],75:[2,90],76:[2,90],77:[2,90],78:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],86:[2,90],88:[2,90],89:[2,90]},{18:[2,36],28:[2,36],31:[2,36],41:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[2,36],51:[2,36],52:[2,36],53:[2,36],54:[2,36],55:[2,36],56:[2,36],57:[2,36],58:[2,36],90:[2,36]},{18:[2,37],28:[2,37],31:[2,37],41:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],51:[2,37],52:[2,37],53:[2,37],54:[2,37],55:[2,37],56:[2,37],57:[2,37],58:[2,37],90:[2,37]},{18:[2,38],28:[2,38],31:[2,38],41:[2,38],46:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],51:[2,38],52:[2,38],53:[2,38],54:[2,38],55:[2,38],56:[2,38],57:[2,38],58:[2,38],90:[2,38]},{18:[2,39],28:[2,39],31:[2,39],41:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],51:[2,39],52:[2,39],53:[2,39],54:[2,39],55:[2,39],56:[2,39],57:[2,39],58:[2,39],90:[2,39]},{73:[1,229]},{4:[2,98],8:[2,98],9:[2,98],10:[2,98],11:[2,98],14:[2,98],69:[2,98],71:[2,98],73:[2,98],74:[2,98],75:[2,98],76:[2,98],77:[2,98],78:[2,98],81:[2,98],82:[2,98],83:[2,98],84:[2,98],86:[2,98],88:[2,98],89:[2,98]},{4:[2,118],8:[2,118],9:[2,118],10:[2,118],11:[2,118],14:[2,118],69:[2,118],71:[2,118],73:[2,118],74:[2,118],75:[2,118],76:[2,118],77:[2,118],78:[2,118],81:[2,118],82:[2,118],83:[2,118],84:[2,118],86:[2,118],88:[2,118],89:[2,118]},{4:[2,120],8:[2,120],9:[2,120],10:[2,120],11:[2,120],14:[2,120],69:[2,120],71:[2,120],73:[2,120],74:[2,120],75:[2,120],76:[2,120],77:[2,120],78:[2,120],81:[2,120],82:[2,120],83:[2,120],84:[2,120],86:[2,120],88:[2,120],89:[2,120]},{28:[1,230],46:[1,140],47:[1,141],48:[1,142],49:[1,143],50:[1,144],51:[1,145],52:[1,146],53:[1,147],54:[1,148],55:[1,149],56:[1,150],57:[1,151],58:[1,152]},{4:[2,89],8:[2,89],9:[2,89],10:[2,89],11:[2,89],14:[2,89],69:[2,89],71:[2,89],73:[2,89],74:[2,89],75:[2,89],76:[2,89],77:[2,89],78:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],86:[2,89],88:[2,89],89:[2,89]},{4:[2,96],8:[2,96],9:[2,96],10:[2,96],11:[2,96],14:[2,96],69:[2,96],71:[2,96],73:[2,96],74:[2,96],75:[2,96],76:[2,96],77:[2,96],78:[2,96],81:[2,96],82:[2,96],83:[2,96],84:[2,96],86:[2,96],88:[2,96],89:[2,96]},{5:231,6:4,7:5,8:[1,6],9:[1,7],10:[1,8],11:[1,9],12:10,13:11,14:[1,12],69:[1,13],70:14,71:[1,15],73:[2,111],74:[1,16],75:[1,17],76:[1,18],77:[1,19],78:[1,20],81:[1,21],82:[1,22],83:[1,23],84:[1,24],85:232,86:[1,183],87:233,88:[1,184],89:[1,25]},{73:[2,110],85:234,86:[1,183],87:235,88:[1,184]},{73:[2,113]},{73:[2,115]},{73:[2,112]},{73:[2,114]}],
defaultActions: {2:[2,1],26:[2,2],98:[2,32],99:[2,33],100:[2,34],101:[2,35],123:[2,47],124:[2,48],125:[2,49],126:[2,50],175:[2,123],204:[2,45],215:[2,109],232:[2,113],233:[2,115],234:[2,112],235:[2,114]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:                        return 8; 
break;
case 1:                        return 9; 
break;
case 2:                        return 10; 
break;
case 3:                        return 11; 
break;
case 4: this.pushState('rp');  return yy_.yytext; 
break;
case 5:                        return yy_.yytext; 
break;
case 6: this.popState();
                                      this.pushState('rw');  return yy_.yytext; 
break;
case 7: this.popState();
                                      this.pushState('r');   return 23; 
break;
case 8: this.pushState('r');   return 23; 
break;
case 9:                        return 25; 
break;
case 10: this.pushState('b');   return yy_.yytext; 
break;
case 11: this.popState();       return yy_.yytext; 
break;
case 12: this.pushState('p');   return yy_.yytext; 
break;
case 13: this.popState();       return yy_.yytext; 
break;
case 14: this.pushState('m');   return yy_.yytext; 
break;
case 15: this.popState();       return yy_.yytext; 
break;
case 16: this.popState();       return 4; 
break;
case 17: this.popState(); 
break;
case 18: /*ignore whitespace and \n*/ 
break;
case 19:                        return yy_.yytext; 
break;
case 20:                        return yy_.yytext; 
break;
case 21:                        return yy_.yytext; 
break;
case 22:                        return 72; 
break;
case 23:                        return yy_.yytext.toUpperCase(); 
break;
case 24:                        return yy_.yytext; 
break;
case 25:                        return yy_.yytext; 
break;
case 26:                        return yy_.yytext; 
break;
case 27:                        return yy_.yytext; 
break;
case 28:                        return 66; 
break;
case 29:                        return 65; 
break;
case 30:                        return 67; 
break;
case 31:                        return 68; 
break;
case 32: this.pushState('bp');  return 69; 
break;
case 33: this.pushState('bp');  return 89; 
break;
case 34: this.pushState('bp');  return 88; 
break;
case 35:                        return 86; 
break;
case 36:                        return 73; 
break;
case 37: this.pushState('bp');  return 71;
break;
case 38: this.pushState('bp');  return 74; 
break;
case 39: this.pushState('bp');  return 75; 
break;
case 40:                        return 83; 
break;
case 41:                        return 84; 
break;
case 42: this.pushState('bp');  return 76; 
break;
case 43: this.pushState('bp');  return 77; 
break;
case 44: this.pushState('bpm'); return 78; 
break;
case 45: this.pushState('bpm'); return 81; 
break;
case 46: this.pushState('bpm'); return 82; 
break;
case 47: this.popState();
                                      this.pushState('p');   return 26; 
break;
case 48: this.popState();
                                      this.pushState('pm');  return 26;
break;
case 49:                        return 23; 
break;
case 50:                        return 41; 
break;
case 51: this.popState();       return 28; 
break;
case 52:                        return 90; 
break;
case 53:                        return 8; 
break;
case 54:                        return 4; 
break;
}
},
rules: [/^(?:(\\\$|\\#|[^\$\#])+)/,/^(?:#\[\[[\s\S]*?\]\]#)/,/^(?:##.*)/,/^(?:#\*[\s\S]*?\*#)/,/^(?:\$(?=!?\{?([a-zA-Z][a-zA-Z0-9-_]*)))/,/^(?:!)/,/^(?:\{)/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*))/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*))/,/^(?:\.([a-zA-Z][a-zA-Z0-9-_]*))/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:$)/,/^(?:)/,/^(?:\s+)/,/^(?::)/,/^(?:,)/,/^(?:\.\.)/,/^(?:in\b)/,/^(?:true|false|null\b)/,/^(?:==|!=|>=|<=|>|<)/,/^(?:&&|\|\||!)/,/^(?:[\+\-\*\/\%])/,/^(?:=)/,/^(?:\d+\.\d+)/,/^(?:\d+)/,/^(?:"(\\"|[^\"])*")/,/^(?:'(\\'|[^\'])*')/,/^(?:#(\{set\}|set)((?=[ \t]*\()))/,/^(?:#(\{if\}|if)((?=[ \t]*\()))/,/^(?:#(\{elseif\}|elseif)((?=[ \t]*\()))/,/^(?:#(\{else\}|else(?!([a-zA-Z]))))/,/^(?:#(\{end\}|end(?!([a-zA-Z]))))/,/^(?:#(\{foreach\}|foreach)((?=[ \t]*\()))/,/^(?:#(\{include\}|include)((?=[ \t]*\()))/,/^(?:#(\{parse\}|parse)((?=[ \t]*\()))/,/^(?:#(\{stop\}|stop(?!([a-zA-Z]))))/,/^(?:#(\{break\}|break(?!([a-zA-Z]))))/,/^(?:#(\{evaluate\}|evaluate)((?=[ \t]*\()))/,/^(?:#(\{define\}|define)((?=[ \t]*\()))/,/^(?:#(\{macro\}|macro)((?=[ \t]*\()))/,/^(?:#(\{([a-zA-Z])+\}|([a-zA-Z])+)((?=[ \t]*\()))/,/^(?:#@(\{([a-zA-Z])+\}|([a-zA-Z])+)((?=[ \t]*\()))/,/^(?:[ \t]*\()/,/^(?:[ \t]*\(\s*)/,/^(?:([a-zA-Z][a-zA-Z0-9-_]*))/,/^(?:\s*,\s*)/,/^(?:\s*\))/,/^(?:\s+)/,/^(?:[\$\#])/,/^(?:$)/],
conditions: {"rp":{"rules":[5,6,7],"inclusive":false},"rw":{"rules":[8,15],"inclusive":false},"r":{"rules":[9,10,12,16,17],"inclusive":false},"b":{"rules":[4,10,11,12,14,18,20,21,23,24,25,26,27,28,29,30,31],"inclusive":false},"bpm":{"rules":[48],"inclusive":false},"bp":{"rules":[47],"inclusive":false},"pm":{"rules":[4,10,12,14,23,28,29,30,31,49,50,51,52],"inclusive":false},"p":{"rules":[4,10,12,13,14,18,20,22,23,24,25,26,27,28,29,30,31],"inclusive":false},"m":{"rules":[4,10,12,14,15,18,19,20,23,24,25,26,27,28,29,30,31],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,53,54],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = velocity;
exports.Parser = velocity.Parser;
exports.parse = function () { return velocity.parse.apply(velocity, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}