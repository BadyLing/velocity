#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var commander = require('commander');
var colorful = require('colorful');

var pkg = require('../package');
var vmx = require('../index')
var util = require('../lib/util');
var logger = require('../lib/logger');

var cwd = process.cwd();


commander
  .description(pkg.description)
  .option('-v, --version', 'output version number')
  .option('-V, --verbose', 'output more detail')
  .option('-r, --recursive', 'do recursively')
  .option('-R, --reverse', 'view all files include specified file')
  .option('-d, --debug', 'show debug message')
  .option('-D, --directives <s>', 'directives relate to file including', split)
  .option('-o, --roots <s>', 'template roots', split)
  .option('-t, --to <s>', 'directory to save the translated files')
  .option('-T, --template <s>', 'be used with "-t", specifies target template language')
  .option('-e, --encoding <s>', 'encoding')
  .on('version', function() {
    console.log('\n  ' + colorful.cyan(pkg.version) + '\n');
    process.exit(0);
  }).helpInformation = helpInfo;

commander.parse(process.argv);


var isConf;
var conf = {};

commander.args.forEach(function(item) {
  if (item === 'config') {
    isConf = true;
  } else if (util.isExistedFile(item) && path.extname(item) === '.vm') {
    conf.file = item;
  } else if (item === '_' || /^[a-zA-Z][0-9a-zA-Z-_]*$/.test(item)) {
    conf.variable = item;
  } else {
    logger.error('Not recognized option <%s>.', item);
  }
});


if (isConf) {
  var editor = process.platform === 'win32' ? 'notepad' : 'vi';
  var globalConfPath = path.join(util.getHome(), '.vmx');
  var child = require('child_process').spawn(
    editor,
    [globalConfPath],
    {stdio: 'inherit'}
  );
  child.on('exit', process.exit);
  
} else {
  [
   'verbose',
   'recursive',
   'reverse',
   'directives',
   'roots',
   'to',
   'template',
   'encoding'
  ].forEach(function(item) {
    if (commander[item]) {
      conf[item] = commander[item];
    }
  });
  
  vmx(conf);
}


function helpInfo() {
  return [
    '',
    colorful.cyan('  ' + this.description()),
    '',
    colorful.green('  Usage:'),
    '    vmx config',
    '    ' + this._name + ' [file.vm] [variable] ' + this.usage(),
    '',
    colorful.green('  Options:'),
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    colorful.green('  More Info:'),
    '    ' + colorful.underline(pkg.homepage),
    '',
    ''
  ].join('\n');
}


function split(raw) {
  return raw.split(',');
}


