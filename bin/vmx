#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var commander = require('commander');
var colorful = require('colorful');

var vmx = require('../index')

commander
  .description('Some vm tools.')
  .option('-v, --version', 'output version number')
  .option('-r, --recursive [b]', 'translate template recursively')
  .option('-R, --root [s]', 'path of template root')
  .option('-t, --target [s]', 'path to save the output file')
  .on('version', function() {
    console.log();
    var pkg = require('../package');
    console.log('  ' + colorful.cyan(pkg.version));
    console.log();
    process.exit(0);
  }).helpInformation = helpInfo;

commander.command('tree')
  .description('Show quote tree of specified vm.')
  .option('-r, --recursive [b]', 'search include recursively')
  .action(function(file) {
    vmx.tree(file);
  }).on('--help', function() {
    console.log(colorful.green('  Examples:'))
    console.log('    $ vmx examples/a.vm')
    console.log()
  }).helpInformation = helpInfo;

commander.command('backtrace')
  .description('Show all the vm include specified vm.')
  .action(function(cmd) {
    cmd = arguments[arguments.length - 1];
    cmd.parse(process.argv);
    console.log(cmd);
  }).helpInformation = helpInfo;

commander.command('variable')
  .description('Show specified variable')
  .action(function(cmd) {
    cmd = arguments[arguments.length - 1];
    cmd.parse(process.argv);
    console.log(cmd);
  }).helpInformation = helpInfo;

commander.parse(process.argv);

/*
if (commander.rawArgs.indexOf('list') < 0 && commander.rawArgs.indexOf('config') < 0 ) {
    vmx.translate(common.getCfg(commander));
}*/


function helpInfo() {
  var commandHelp = '';
  if (this.commands.length) {
    commandHelp = '\n' +
      colorful.green('  Commands:') +
      '    ' + 
      this.commandHelp().replace(/\n  Commands:\n/gm, '');
  }

  return [
    '',
    colorful.cyan('  ' + this.description()),
    '',
    colorful.green('  Usage:'),
    '    ' + this._name + ' ' + this.usage(),
    commandHelp,
    colorful.green('  Options:'),
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    colorful.green('  More Info:'),
    '    ' + colorful.underline('https://github.com/fool2fish/vmx'),
    '',
    ''
  ].join('\n');
}

function getCfg(commander) {
    var cfg = {}
    commander.options.forEach(function(item) {
        var key = camelcase(item.name())
        if(key in commander) {
            if (typeof commander[key] !== 'function') {
                cfg[key] = commander[key]
            }
        }
    })
    return cfg
}

function camelcase(str) {
    return str.split('-').reduce(function(str, word){
        return str + word[0].toUpperCase() + word.slice(1)
    })
}

