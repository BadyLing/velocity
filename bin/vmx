#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var commander = require('commander');
var colorful = require('colorful');

var pkg = require('../package');
var vmx = require('../index')

var cwd = process.cwd();


commander
  .description(pkg.description)
  .option('-v, --version', 'output version number')
  .option('-r, --recursive', 'do recursively')
  .option('-R, --reverse', 'view all files include specified file')
  .option('-d, --debug', 'show debug message')
  .option('-D, --directives <s>', 'directives relate to file including', handleDerectives)
  .option('-t, --to [s]', 'path to save the translated files [cwd]')
  .option('-T, --template <s>', 'be used with "-t", specifies target template language')
  .on('version', function() {
    console.log('\n  ' + colorful.cyan(pkg.version) + '\n');
    process.exit(0);
  }).helpInformation = helpInfo;

commander.parse(process.argv);


var conf = {
  dir: cwd
};

['recursive', 'reverse', 'directives', 'to', 'template'].forEach(function(item, idx, list) {
  if (commander[item]) {
    conf[item] = commander[item];
    if (item === 'to' && typeof commander[item] === 'boolean') {
      conf[item] = cwd;
    }
  }
});

commander.args.forEach(function(item, idx, list) {
  if (path.extname(item) === '.vm') {
    conf.file = item;
  } else if (item.indexOf('/') > -1) {
    conf.dir = item;
  } else {
    conf.variable = item;
  }
});

vmx(conf);


function helpInfo() {
  return [
    '',
    colorful.cyan('  ' + this.description()),
    '',
    colorful.green('  Usage:'),
    '    ' + this._name + ' [file.vm] [dir] [variable] ' + this.usage(),
    '',
    colorful.green('  Options:'),
    '' + this.optionHelp().replace(/^/gm, '    '),
    '',
    colorful.green('  More Info:'),
    '    ' + colorful.underline('https://github.com/fool2fish/vmx'),
    '',
    ''
  ].join('\n');
}


function handleDerectives(raw) {
  var rt = {}
  raw.split(',').forEach(function(item, idx, list) {
    var temp = item.split(':');
    rt[temp[0]] = temp[1];
  });
  return rt;
}


